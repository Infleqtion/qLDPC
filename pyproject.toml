[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "qLDPC"
version = "0.1.1"
description = "Tools for constructing and analyzing quantum low density parity check (qLDPC) codes."
license = "Apache-2.0"
authors = ["Michael A. Perlin <mika.perlin@gmail.com>"]
readme = "README.md"
repository = "https://github.com/qLDPCOrg/qLDPC"
keywords = [
  "quantum computing",
  "quantum error correction",
  "low density parity check codes",
  "LDPC",
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Topic :: Scientific/Engineering :: Physics",
]
include = ["qldpc/py.typed", { path = "qldpc/**/*.so", format = "wheel" }]

[tool.poetry.dependencies]
python = "^3.10"
cvxpy = ">=1.3.2"
diskcache = ">=5.0.0"
galois = ">=0.4.2"
ldpc = ">=2.1.8"
networkx = ">=2.6.2"
numpy = ">=1.24.0"
platformdirs = ">=4.0.0"
pymatching = ">=2.1.0"
scipy = ">=1.14.1"
stim = ">=1.14.0"
sympy = ">=1.12"

checks-superstaq = { version = ">=0.5.34", optional = true }
gurobipy = { version = ">=10.0.0", optional = true }
poetry  = { version = ">=2.1.3", optional = true }

[tool.poetry.extras]
dev = ["checks-superstaq", "poetry"]
gurobi = ["gurobipy"]

# Check script configuration:

[tool.ruff]
line-length = 100
lint.extend-select = ["I"]

[tool.mypy]
pretty = true
ignore_missing_imports = true
show_error_codes = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
warn_unused_ignores = true
install_types = true
non_interactive = true
no_implicit_optional = true
plugins = ["numpy.typing.mypy_plugin"]

[tool.pytest.ini_options]
addopts = "--disable-socket" # forbid tests from making network calls
filterwarnings = [
  'ignore:(?s).*The problem is either infeasible or unbounded.*:UserWarning', # from cvxpy
]

[tool.coverage.report]
fail_under = 100
show_missing = true
skip_covered = true
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]

[tool.coverage.run]
include = ["./*"]
